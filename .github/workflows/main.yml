name: CI

on:
  push: ~
  pull_request: ~
  workflow_dispatch: ~

env:
  BUILD_TYPE: Release
  SOURCE_DIR: ${{github.workspace}}
  BUILD_DIR: ${{github.workspace}}/build

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - windows-latest
          - ubuntu-20.04
        include:
          - os: macos-latest
          - os: windows-latest
          - os: ubuntu-latest
    runs-on: ${{matrix.os}}
    env:
      # See https://learn.microsoft.com/en-us/vcpkg/consume/binary-caching-github-actions-cache
      VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
    steps:
      #######################
      # BUILD
      #######################
      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v1
        id: cpu-cores
      - name: Set CMake Parallel level
        run: |
          echo "CMAKE_BUILD_PARALLEL_LEVEL=${{ steps.cpu-cores.outputs.count }}" >> ${GITHUB_ENV}
          echo "CTEST_PARALLEL_LEVEL=1" >> ${GITHUB_ENV}
      # See https://learn.microsoft.com/en-us/vcpkg/consume/binary-caching-github-actions-cache
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      - uses: actions/checkout@v3
      - name: Create Build Environment
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        # Telling cmake to make the directory adapts the different syntax for each platform
        run: cmake -E make_directory "${BUILD_DIR}"
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install System Packages (macOS)
        if: ${{runner.os == 'macOS'}}
        run: brew install pandoc
      - name: Install System Packages (Windows)
        if: ${{runner.os == 'Windows'}}
        run: |
          Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1
          choco install nsis.portable -y
          choco install pandoc -y --ia=ALLUSERS=1
          refreshenv
      - name: Install System Packages (Linux)
        if: ${{runner.os == 'Linux'}}
        run: |
          sudo apt-get update
          sudo apt-get -y install pandoc qt6-base-dev
      - name: Install Qt
        # Don't need this on Linux, as Qt will come from the system package manager above
        if: ${{runner.os != 'Linux'}}
        uses: jurplel/install-qt-action@v3
        with:
          dir: ${{github.workspace}}/.qt
          setup-python: false
          cache: true
      - name: Configure CMake
        shell: bash
        run: cmake -S "${SOURCE_DIR}" -B "${BUILD_DIR}" -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake
      - name: Build
        shell: bash
        run: cmake --build "${BUILD_DIR}" --config ${BUILD_TYPE}

      #######################
      # TEST
      #######################
      - name: Test
        working-directory: ${{env.BUILD_DIR}}
        shell: bash
        run: ctest -C ${BUILD_TYPE}

      #######################
      # PACKAGE
      #######################
      - name: Package prep
        shell: bash
        run: |
          cmake -DBUILD_PACKAGE=On -DBUILD_TESTING=Off "${BUILD_DIR}"
          cmake --build "${BUILD_DIR}" --config ${BUILD_TYPE}
      - name: Package (macOS)
        if: ${{runner.os == 'macOS'}}
        working-directory: ${{env.BUILD_DIR}}
        shell: bash
        run: cpack -G "ZIP;DragNDrop" -B "${BUILD_DIR}/packages"
      - name: Package (Windows)
        if: ${{runner.os == 'Windows'}}
        working-directory: ${{env.BUILD_DIR}}
        shell: bash
        run: cpack -G "ZIP;NSIS" -B "${BUILD_DIR}/packages"
      - name: Package (Linux)
        if: ${{runner.os == 'Linux'}}
        working-directory: ${{env.BUILD_DIR}}
        shell: bash
        run: cpack -G "TGZ;TBZ2;DEB" -B "${BUILD_DIR}/packages"
      - name: Upload packages
        uses: actions/upload-artifact@v2
        with:
          name: packages
          path: ${{env.BUILD_DIR}}/packages/splitbill-*.*
          if-no-files-found: error

  pages:
    runs-on: ubuntu-latest
    if: ${{github.ref == 'refs/heads/master'}}
    needs:
      - build
    steps:
      - uses: actions/checkout@v2
      - name: Create Build Environment
        run: mkdir "${BUILD_DIR}"
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install sphinx
      - name: Download built packages
        uses: actions/download-artifact@v2
        with:
          name: packages
          path: ${{env.BUILD_DIR}}/packages
      - name: Configure CMake
        run: cmake -S "${SOURCE_DIR}" -B "${BUILD_DIR}" -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DBUILD_APP=Off -DBUILD_DOC=On -DDOC_OUTPUT_DIR="${{github.workspace}}/public"
      - name: Build
        run: cmake --build "${BUILD_DIR}" --config ${BUILD_TYPE} --target doc
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{github.workspace}}/public
